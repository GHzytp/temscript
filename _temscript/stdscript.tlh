// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (4eca4731).
//
// c:\users\tore\desktop\temscript\build\temp.win32-2.7\release\_temscript\stdscript.tlh
//
// C++ source equivalent of Win32 type library stdscript.dll
// compiler-generated file created 04/21/12 at 16:19:26 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TEMScripting {

//
// Forward references and typedefs
//

struct __declspec(uuid("bc0a2b03-10ff-11d3-ae00-00a024cba50c"))
/* LIBID */ __TEMScripting;
struct __declspec(uuid("02cdc9a2-1f1d-11d3-ae11-00a024cba50c"))
/* dispinterface */ UserButtonEvent;
struct /* coclass */ Instrument;
struct __declspec(uuid("bc0a2b11-10ff-11d3-ae00-00a024cba50c"))
/* dual interface */ InstrumentInterface;
enum TEMScriptingError;
struct __declspec(uuid("c7646442-1115-11d3-ae00-00a024cba50c"))
/* dual interface */ Vacuum;
enum VacuumStatus;
struct __declspec(uuid("6e6f03b0-2ece-11d3-ae79-004095005b07"))
/* dual interface */ Gauges;
struct __declspec(uuid("52020820-18bf-11d3-86e1-00c04fc126dd"))
/* dual interface */ Gauge;
enum GaugeStatus;
enum GaugePressureLevel;
struct __declspec(uuid("9851bc41-1b8c-11d3-ae0a-00a024cba50c"))
/* dual interface */ Camera;
enum ScreenPosition;
enum PlateLabelDateFormat;
struct __declspec(uuid("e7ae1e41-1bf8-11d3-ae0b-00a024cba50c"))
/* dual interface */ Stage;
struct __declspec(uuid("9851bc4a-1b8c-11d3-ae0a-00a024cba50c"))
/* dual interface */ StagePosition;
enum StageAxes;
enum StageStatus;
enum StageHolderType;
struct __declspec(uuid("8f1e91c2-b97d-45b8-87c9-423f5eb10b8a"))
/* dual interface */ StageAxisData;
enum MeasurementUnitType;
struct __declspec(uuid("ef960690-1c38-11d3-ae0b-00a024cba50c"))
/* dual interface */ Illumination;
enum IlluminationNormalization;
enum IlluminationMode;
struct __declspec(uuid("9851bc47-1b8c-11d3-ae0a-00a024cba50c"))
/* dual interface */ Vector;
enum DarkFieldMode;
enum CondenserMode;
struct __declspec(uuid("b39c3ae1-1e41-11d3-ae0e-00a024cba50c"))
/* dual interface */ Projection;
enum ProjectionNormalization;
enum ProjectionMode;
enum ProjectionSubMode;
enum LensProg;
enum ProjectionDetectorShift;
enum ProjDetectorShiftMode;
struct __declspec(uuid("e6f00870-3164-11d3-b4c8-00a024cb9221"))
/* dual interface */ Gun;
enum HightensionState;
struct __declspec(uuid("50c21d10-317f-11d3-b4c8-00a024cb9221"))
/* dual interface */ UserButtons;
struct __declspec(uuid("e6f00871-3164-11d3-b4c8-00a024cb9221"))
/* dual interface */ IUserButton;
struct __declspec(uuid("28df27ea-2058-41d0-abbd-167fb3bfcd8f"))
/* dual interface */ AutoLoader;
enum CassetteSlotStatus;
struct __declspec(uuid("71b6e709-b21f-435f-9529-1aee55cfa029"))
/* dual interface */ TemperatureControl;
enum RefrigerantLevel;
struct __declspec(uuid("f1f59bb0-f8a0-439d-a3bf-87f527b600c4"))
/* dual interface */ BlankerShutter;
struct __declspec(uuid("8dc0fc71-ff15-40d8-8174-092218d8b76b"))
/* dual interface */ InstrumentModeControl;
enum InstrumentMode;
struct __declspec(uuid("d6bbf89c-22b8-468f-80a1-947ea89269ce"))
/* dual interface */ Acquisition;
struct __declspec(uuid("86365241-4d38-4642-b024-cf450ceb250b"))
/* dual interface */ AcqImages;
struct __declspec(uuid("e15f4810-43c6-489a-9e8a-588b0949e153"))
/* dual interface */ AcqImage;
struct __declspec(uuid("c851d96c-96b2-4bdf-8df2-c0a01b76e265"))
/* dual interface */ CCDCameras;
struct __declspec(uuid("e44e1565-4131-4937-b273-78219e090845"))
/* dual interface */ CCDCamera;
struct __declspec(uuid("024ded60-b124-4514-bfe2-02c0f5c51db9"))
/* dual interface */ CCDCameraInfo;
enum AcqShutterMode;
struct __declspec(uuid("c03db779-1345-42ab-9304-95b85789163d"))
/* dual interface */ CCDAcqParams;
enum AcqImageSize;
enum AcqImageCorrection;
enum AcqExposureMode;
struct __declspec(uuid("35a2675d-e67b-4834-8940-85e7833c61a6"))
/* dual interface */ STEMDetectors;
struct __declspec(uuid("d77c0d65-a1dd-4d0a-af25-c280046a5719"))
/* dual interface */ STEMDetector;
struct __declspec(uuid("96de094b-9cdc-4796-8697-e7dd5dc3ec3f"))
/* dual interface */ STEMDetectorInfo;
struct __declspec(uuid("ddc14710-6152-4963-aea4-c67ba784c6b4"))
/* dual interface */ STEMAcqParams;
struct __declspec(uuid("39cacdaf-f47c-4bbf-9ffa-a7a737664ced"))
/* dual interface */ Configuration;
enum ProductFamily;
struct /* coclass */ UserButton;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(UserButtonEvent, __uuidof(UserButtonEvent));
_COM_SMARTPTR_TYPEDEF(Gauge, __uuidof(Gauge));
_COM_SMARTPTR_TYPEDEF(Gauges, __uuidof(Gauges));
_COM_SMARTPTR_TYPEDEF(Vacuum, __uuidof(Vacuum));
_COM_SMARTPTR_TYPEDEF(Camera, __uuidof(Camera));
_COM_SMARTPTR_TYPEDEF(StagePosition, __uuidof(StagePosition));
_COM_SMARTPTR_TYPEDEF(StageAxisData, __uuidof(StageAxisData));
_COM_SMARTPTR_TYPEDEF(Stage, __uuidof(Stage));
_COM_SMARTPTR_TYPEDEF(Vector, __uuidof(Vector));
_COM_SMARTPTR_TYPEDEF(Illumination, __uuidof(Illumination));
_COM_SMARTPTR_TYPEDEF(Projection, __uuidof(Projection));
_COM_SMARTPTR_TYPEDEF(Gun, __uuidof(Gun));
_COM_SMARTPTR_TYPEDEF(IUserButton, __uuidof(IUserButton));
_COM_SMARTPTR_TYPEDEF(UserButtons, __uuidof(UserButtons));
_COM_SMARTPTR_TYPEDEF(AutoLoader, __uuidof(AutoLoader));
_COM_SMARTPTR_TYPEDEF(TemperatureControl, __uuidof(TemperatureControl));
_COM_SMARTPTR_TYPEDEF(BlankerShutter, __uuidof(BlankerShutter));
_COM_SMARTPTR_TYPEDEF(InstrumentModeControl, __uuidof(InstrumentModeControl));
_COM_SMARTPTR_TYPEDEF(AcqImage, __uuidof(AcqImage));
_COM_SMARTPTR_TYPEDEF(AcqImages, __uuidof(AcqImages));
_COM_SMARTPTR_TYPEDEF(CCDCameraInfo, __uuidof(CCDCameraInfo));
_COM_SMARTPTR_TYPEDEF(CCDAcqParams, __uuidof(CCDAcqParams));
_COM_SMARTPTR_TYPEDEF(CCDCamera, __uuidof(CCDCamera));
_COM_SMARTPTR_TYPEDEF(CCDCameras, __uuidof(CCDCameras));
_COM_SMARTPTR_TYPEDEF(STEMDetectorInfo, __uuidof(STEMDetectorInfo));
_COM_SMARTPTR_TYPEDEF(STEMDetector, __uuidof(STEMDetector));
_COM_SMARTPTR_TYPEDEF(STEMAcqParams, __uuidof(STEMAcqParams));
_COM_SMARTPTR_TYPEDEF(STEMDetectors, __uuidof(STEMDetectors));
_COM_SMARTPTR_TYPEDEF(Acquisition, __uuidof(Acquisition));
_COM_SMARTPTR_TYPEDEF(Configuration, __uuidof(Configuration));
_COM_SMARTPTR_TYPEDEF(InstrumentInterface, __uuidof(InstrumentInterface));

//
// Type library items
//

struct __declspec(uuid("02cdc9a2-1f1d-11d3-ae11-00a024cba50c"))
UserButtonEvent : IDispatch
{};

struct __declspec(uuid("02cdc9a1-1f1d-11d3-ae11-00a024cba50c"))
Instrument;
    // [ default ] interface InstrumentInterface

enum TEMScriptingError
{
    E_NOT_OK = -2147155969,
    E_VALUE_CLIP = -2147155970,
    E_OUT_OF_RANGE = -2147155971,
    E_NOT_IMPLEMENTED = -2147155972
};

enum VacuumStatus
{
    vsUnknown = 1,
    vsOff = 2,
    vsCameraAir = 3,
    vsBusy = 4,
    vsReady = 5,
    vsElse = 6
};

enum GaugeStatus
{
    gsUndefined = 0,
    gsUnderflow = 1,
    gsOverflow = 2,
    gsInvalid = 3,
    gsValid = 4
};

enum GaugePressureLevel
{
    plGaugePressurelevelUndefined = 0,
    plGaugePressurelevelLow = 1,
    plGaugePressurelevelLowMedium = 2,
    plGaugePressurelevelMediumHigh = 3,
    plGaugePressurelevelHigh = 4
};

struct __declspec(uuid("52020820-18bf-11d3-86e1-00c04fc126dd"))
Gauge : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Read ( ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Pressure (
        /*[out,retval]*/ double * pPresure ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum GaugeStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_PressureLevel (
        /*[out,retval]*/ enum GaugePressureLevel * pVal ) = 0;
};

struct __declspec(uuid("6e6f03b0-2ece-11d3-ae79-004095005b07"))
Gauges : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        VARIANT index,
        /*[out,retval]*/ struct Gauge * * pG ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("c7646442-1115-11d3-ae00-00a024cba50c"))
Vacuum : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RunBufferCycle ( ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum VacuumStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_PVPRunning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Gauges (
        /*[out,retval]*/ struct Gauges * * pG ) = 0;
      virtual HRESULT __stdcall get_ColumnValvesOpen (
        /*[out,retval]*/ VARIANT_BOOL * pO ) = 0;
      virtual HRESULT __stdcall put_ColumnValvesOpen (
        /*[in]*/ VARIANT_BOOL pO ) = 0;
};

enum ScreenPosition
{
    spUnknown = 1,
    spUp = 2,
    spDown = 3
};

enum PlateLabelDateFormat
{
    dtNoDate = 0,
    dtDDMMYY = 1,
    dtMMDDYY = 2,
    dtYYMMDD = 3
};

struct __declspec(uuid("9851bc41-1b8c-11d3-ae0a-00a024cba50c"))
Camera : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_TakeExposure ( ) = 0;
      virtual HRESULT __stdcall get_Stock (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_MainScreen (
        /*[out,retval]*/ enum ScreenPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_MainScreen (
        /*[in]*/ enum ScreenPosition pVal ) = 0;
      virtual HRESULT __stdcall get_IsSmallScreenDown (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MeasuredExposureTime (
        /*[out,retval]*/ double * pET ) = 0;
      virtual HRESULT __stdcall get_FilmText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilmText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ManualExposureTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ManualExposureTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlateuMarker (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PlateuMarker (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ExposureNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ExposureNumber (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Usercode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Usercode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ManualExposure (
        /*[out,retval]*/ VARIANT_BOOL * ps ) = 0;
      virtual HRESULT __stdcall put_ManualExposure (
        /*[in]*/ VARIANT_BOOL ps ) = 0;
      virtual HRESULT __stdcall get_PlateLabelDateType (
        /*[out,retval]*/ enum PlateLabelDateFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_PlateLabelDateType (
        /*[in]*/ enum PlateLabelDateFormat pVal ) = 0;
      virtual HRESULT __stdcall get_ScreenDim (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScreenDim (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScreenDimText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScreenDimText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScreenCurrent (
        /*[out,retval]*/ double * pSC ) = 0;
};

struct __declspec(uuid("9851bc4a-1b8c-11d3-ae0a-00a024cba50c"))
StagePosition : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetAsArray (
        double * pos ) = 0;
      virtual HRESULT __stdcall raw_SetAsArray (
        double * pos ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pVal ) = 0;
};

enum StageAxes
{
    axisX = 1,
    axisY = 2,
    axisXY = 3,
    axisZ = 4,
    axisA = 8,
    axisB = 16
};

enum StageStatus
{
    stReady = 0,
    stDisabled = 1,
    stNotReady = 2,
    stGoing = 3,
    stMoving = 4,
    stWobbling = 5
};

enum StageHolderType
{
    hoNone = 0,
    hoSingleTilt = 1,
    hoDoubleTilt = 2,
    hoInvalid = 4,
    hoPolara = 5,
    hoDualAxis = 6
};

enum MeasurementUnitType
{
    MeasurementUnitType_Unknown = 0,
    MeasurementUnitType_Meters = 1,
    MeasurementUnitType_Radians = 2
};

struct __declspec(uuid("8f1e91c2-b97d-45b8-87c9-423f5eb10b8a"))
StageAxisData : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinPos (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxPos (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UnitType (
        /*[out,retval]*/ enum MeasurementUnitType * pVal ) = 0;
};

struct __declspec(uuid("e7ae1e41-1bf8-11d3-ae0b-00a024cba50c"))
Stage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Goto (
        struct StagePosition * newPos,
        enum StageAxes mask ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        struct StagePosition * newPos,
        enum StageAxes mask ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum StageStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct StagePosition * * pVal ) = 0;
      virtual HRESULT __stdcall get_Holder (
        /*[out,retval]*/ enum StageHolderType * pVal ) = 0;
      virtual HRESULT __stdcall get_AxisData (
        enum StageAxes mask,
        /*[out,retval]*/ struct StageAxisData * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GotoWithSpeed (
        /*[in]*/ struct StagePosition * newPos,
        /*[in]*/ enum StageAxes mask,
        /*[in]*/ double speed ) = 0;
};

enum IlluminationNormalization
{
    nmSpotsize = 1,
    nmIntensity = 2,
    nmCondenser = 3,
    nmMiniCondenser = 4,
    nmObjectivePole = 5,
    nmAll = 6
};

enum IlluminationMode
{
    imNanoProbe = 0,
    imMicroProbe = 1
};

struct __declspec(uuid("9851bc47-1b8c-11d3-ae0a-00a024cba50c"))
Vector : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
};

enum DarkFieldMode
{
    dfOff = 1,
    dfCartesian = 2,
    dfConical = 3
};

enum CondenserMode
{
    cmParallelIllumination = 0,
    cmProbeIllumination = 1
};

struct __declspec(uuid("ef960690-1c38-11d3-ae0b-00a024cba50c"))
Illumination : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Normalize (
        enum IlluminationNormalization nm ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum IlluminationMode * pMode ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum IlluminationMode pMode ) = 0;
      virtual HRESULT __stdcall get_SpotsizeIndex (
        /*[out,retval]*/ long * pSS ) = 0;
      virtual HRESULT __stdcall put_SpotsizeIndex (
        /*[in]*/ long pSS ) = 0;
      virtual HRESULT __stdcall get_Intensity (
        /*[out,retval]*/ double * pInt ) = 0;
      virtual HRESULT __stdcall put_Intensity (
        /*[in]*/ double pInt ) = 0;
      virtual HRESULT __stdcall get_IntensityZoomEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pIZE ) = 0;
      virtual HRESULT __stdcall put_IntensityZoomEnabled (
        /*[in]*/ VARIANT_BOOL pIZE ) = 0;
      virtual HRESULT __stdcall get_IntensityLimitEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pILE ) = 0;
      virtual HRESULT __stdcall put_IntensityLimitEnabled (
        /*[in]*/ VARIANT_BOOL pILE ) = 0;
      virtual HRESULT __stdcall get_BeamBlanked (
        /*[out,retval]*/ VARIANT_BOOL * pBB ) = 0;
      virtual HRESULT __stdcall put_BeamBlanked (
        /*[in]*/ VARIANT_BOOL pBB ) = 0;
      virtual HRESULT __stdcall get_Shift (
        /*[out,retval]*/ struct Vector * * pBS ) = 0;
      virtual HRESULT __stdcall put_Shift (
        /*[in]*/ struct Vector * pBS ) = 0;
      virtual HRESULT __stdcall get_Tilt (
        /*[out,retval]*/ struct Vector * * pDFT ) = 0;
      virtual HRESULT __stdcall put_Tilt (
        /*[in]*/ struct Vector * pDFT ) = 0;
      virtual HRESULT __stdcall get_RotationCenter (
        /*[out,retval]*/ struct Vector * * pRC ) = 0;
      virtual HRESULT __stdcall put_RotationCenter (
        /*[in]*/ struct Vector * pRC ) = 0;
      virtual HRESULT __stdcall get_CondenserStigmator (
        /*[out,retval]*/ struct Vector * * pCStig ) = 0;
      virtual HRESULT __stdcall put_CondenserStigmator (
        /*[in]*/ struct Vector * pCStig ) = 0;
      virtual HRESULT __stdcall get_DFMode (
        /*[out,retval]*/ enum DarkFieldMode * pVal ) = 0;
      virtual HRESULT __stdcall put_DFMode (
        /*[in]*/ enum DarkFieldMode pVal ) = 0;
      virtual HRESULT __stdcall get_CondenserMode (
        /*[out,retval]*/ enum CondenserMode * pConMode ) = 0;
      virtual HRESULT __stdcall put_CondenserMode (
        /*[in]*/ enum CondenserMode pConMode ) = 0;
      virtual HRESULT __stdcall get_IlluminatedArea (
        /*[out,retval]*/ double * pIll ) = 0;
      virtual HRESULT __stdcall put_IlluminatedArea (
        /*[in]*/ double pIll ) = 0;
      virtual HRESULT __stdcall get_ProbeDefocus (
        /*[out,retval]*/ double * pDef ) = 0;
      virtual HRESULT __stdcall get_ConvergenceAngle (
        /*[out,retval]*/ double * pAng ) = 0;
      virtual HRESULT __stdcall get_StemMagnification (
        /*[out,retval]*/ double * pMag ) = 0;
      virtual HRESULT __stdcall put_StemMagnification (
        /*[in]*/ double pMag ) = 0;
      virtual HRESULT __stdcall get_StemRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StemRotation (
        /*[in]*/ double pVal ) = 0;
};

enum ProjectionNormalization
{
    pnmObjective = 10,
    pnmProjector = 11,
    pnmAll = 12
};

enum ProjectionMode
{
    pmImaging = 1,
    pmDiffraction = 2
};

enum ProjectionSubMode
{
    psmLM = 1,
    psmMi = 2,
    psmSA = 3,
    psmMh = 4,
    psmLAD = 5,
    psmD = 6
};

enum LensProg
{
    lpRegular = 1,
    lpEFTEM = 2
};

enum ProjectionDetectorShift
{
    pdsOnAxis = 0,
    pdsNearAxis = 1,
    pdsOffAxis = 2
};

enum ProjDetectorShiftMode
{
    pdsmAutoIgnore = 1,
    pdsmManual = 2,
    pdsmAlignment = 3
};

struct __declspec(uuid("b39c3ae1-1e41-11d3-ae0e-00a024cba50c"))
Projection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ResetDefocus ( ) = 0;
      virtual HRESULT __stdcall raw_Normalize (
        /*[in]*/ enum ProjectionNormalization norm ) = 0;
      virtual HRESULT __stdcall raw_ChangeProjectionIndex (
        /*[in]*/ long addVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum ProjectionMode * pVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum ProjectionMode pVal ) = 0;
      virtual HRESULT __stdcall get_Focus (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Focus (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Magnification (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CameraLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_MagnificationIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnificationIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CameraLengthIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CameraLengthIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ImageShift (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageShift (
        /*[in]*/ struct Vector * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageBeamShift (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageBeamShift (
        /*[in]*/ struct Vector * pVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionShift (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionShift (
        /*[in]*/ struct Vector * pVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionStigmator (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionStigmator (
        /*[in]*/ struct Vector * pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectiveStigmator (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectiveStigmator (
        /*[in]*/ struct Vector * pVal ) = 0;
      virtual HRESULT __stdcall get_Defocus (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Defocus (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SubModeString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SubMode (
        /*[out,retval]*/ enum ProjectionSubMode * pVal ) = 0;
      virtual HRESULT __stdcall get_SubModeMinIndex (
        /*[out,retval]*/ long * pN ) = 0;
      virtual HRESULT __stdcall get_SubModeMaxIndex (
        /*[out,retval]*/ long * pN ) = 0;
      virtual HRESULT __stdcall get_ObjectiveExcitation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LensProgram (
        /*[out,retval]*/ enum LensProg * pVal ) = 0;
      virtual HRESULT __stdcall put_LensProgram (
        /*[in]*/ enum LensProg pVal ) = 0;
      virtual HRESULT __stdcall get_ImageRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DetectorShift (
        /*[out,retval]*/ enum ProjectionDetectorShift * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorShift (
        /*[in]*/ enum ProjectionDetectorShift pVal ) = 0;
      virtual HRESULT __stdcall get_DetectorShiftMode (
        /*[out,retval]*/ enum ProjDetectorShiftMode * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorShiftMode (
        /*[in]*/ enum ProjDetectorShiftMode pVal ) = 0;
      virtual HRESULT __stdcall get_ImageBeamTilt (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageBeamTilt (
        /*[in]*/ struct Vector * pVal ) = 0;
};

enum HightensionState
{
    htDisabled = 1,
    htOff = 2,
    htOn = 3
};

struct __declspec(uuid("e6f00870-3164-11d3-b4c8-00a024cb9221"))
Gun : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HTState (
        /*[out,retval]*/ enum HightensionState * ps ) = 0;
      virtual HRESULT __stdcall put_HTState (
        /*[in]*/ enum HightensionState ps ) = 0;
      virtual HRESULT __stdcall get_HTValue (
        /*[out,retval]*/ double * phtval ) = 0;
      virtual HRESULT __stdcall put_HTValue (
        /*[in]*/ double phtval ) = 0;
      virtual HRESULT __stdcall get_HTMaxValue (
        /*[out,retval]*/ double * pMaxHT ) = 0;
      virtual HRESULT __stdcall get_Shift (
        /*[out,retval]*/ struct Vector * * pBS ) = 0;
      virtual HRESULT __stdcall put_Shift (
        /*[in]*/ struct Vector * pBS ) = 0;
      virtual HRESULT __stdcall get_Tilt (
        /*[out,retval]*/ struct Vector * * pDFT ) = 0;
      virtual HRESULT __stdcall put_Tilt (
        /*[in]*/ struct Vector * pDFT ) = 0;
};

struct __declspec(uuid("e6f00871-3164-11d3-b4c8-00a024cb9221"))
IUserButton : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Assignment (
        /*[out,retval]*/ BSTR * pas ) = 0;
      virtual HRESULT __stdcall put_Assignment (
        /*[in]*/ BSTR pas ) = 0;
};

struct __declspec(uuid("50c21d10-317f-11d3-b4c8-00a024cb9221"))
UserButtons : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        VARIANT index,
        /*[out,retval]*/ struct IUserButton * * pUB ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

enum CassetteSlotStatus
{
    CassetteSlotStatus_Unknown = 0,
    CassetteSlotStatus_Occupied = 1,
    CassetteSlotStatus_Empty = 2,
    CassetteSlotStatus_Error = 3
};

struct __declspec(uuid("28df27ea-2058-41d0-abbd-167fb3bfcd8f"))
AutoLoader : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadCartridge (
        /*[in]*/ long fromSlot ) = 0;
      virtual HRESULT __stdcall raw_UnloadCartridge ( ) = 0;
      virtual HRESULT __stdcall raw_PerformCassetteInventory ( ) = 0;
      virtual HRESULT __stdcall raw_BufferCycle ( ) = 0;
      virtual HRESULT __stdcall get_AutoLoaderAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pAvail ) = 0;
      virtual HRESULT __stdcall get_NumberOfCassetteSlots (
        /*[out,retval]*/ long * nrOfSlots ) = 0;
      virtual HRESULT __stdcall get_SlotStatus (
        /*[in]*/ long slot,
        /*[out,retval]*/ enum CassetteSlotStatus * Status ) = 0;
};

enum RefrigerantLevel
{
    RefrigerantLevel_AutoloaderDewar = 0,
    RefrigerantLevel_ColumnDewar = 1,
    RefrigerantLevel_HeliumDewar = 2
};

struct __declspec(uuid("71b6e709-b21f-435f-9529-1aee55cfa029"))
TemperatureControl : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ForceRefill ( ) = 0;
      virtual HRESULT __stdcall get_TemperatureControlAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pAvail ) = 0;
      virtual HRESULT __stdcall get_RefrigerantLevel (
        /*[in]*/ enum RefrigerantLevel rl,
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("f1f59bb0-f8a0-439d-a3bf-87f527b600c4"))
BlankerShutter : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShutterOverrideOn (
        /*[out,retval]*/ VARIANT_BOOL * pOverride ) = 0;
      virtual HRESULT __stdcall put_ShutterOverrideOn (
        /*[in]*/ VARIANT_BOOL pOverride ) = 0;
};

enum InstrumentMode
{
    InstrumentMode_TEM = 0,
    InstrumentMode_STEM = 1
};

struct __declspec(uuid("8dc0fc71-ff15-40d8-8174-092218d8b76b"))
InstrumentModeControl : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StemAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pAvail ) = 0;
      virtual HRESULT __stdcall get_InstrumentMode (
        /*[out,retval]*/ enum InstrumentMode * pMode ) = 0;
      virtual HRESULT __stdcall put_InstrumentMode (
        /*[in]*/ enum InstrumentMode pMode ) = 0;
};

struct __declspec(uuid("e15f4810-43c6-489a-9e8a-588b0949e153"))
AcqImage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AsSafeArray (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("86365241-4d38-4642-b024-cf450ceb250b"))
AcqImages : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct AcqImage * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

enum AcqShutterMode
{
    AcqShutterMode_PreSpecimen = 0,
    AcqShutterMode_PostSpecimen = 1,
    AcqShutterMode_Both = 2
};

struct __declspec(uuid("024ded60-b124-4514-bfe2-02c0f5c51db9"))
CCDCameraInfo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ struct Vector * * pVal ) = 0;
      virtual HRESULT __stdcall get_Binnings (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_ShutterModes (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_ShutterMode (
        /*[out,retval]*/ enum AcqShutterMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ShutterMode (
        /*[in]*/ enum AcqShutterMode pVal ) = 0;
};

enum AcqImageSize
{
    AcqImageSize_Full = 0,
    AcqImageSize_Half = 1,
    AcqImageSize_Quarter = 2
};

enum AcqImageCorrection
{
    AcqImageCorrection_Unprocessed = 0,
    AcqImageCorrection_Default = 1
};

enum AcqExposureMode
{
    AcqExposureMode_None = 0,
    AcqExposureMode_Simultaneous = 1,
    AcqExposureMode_PreExposure = 2,
    AcqExposureMode_PreExposurePause = 3
};

struct __declspec(uuid("c03db779-1345-42ab-9304-95b85789163d"))
CCDAcqParams : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageSize (
        /*[out,retval]*/ enum AcqImageSize * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageSize (
        /*[in]*/ enum AcqImageSize pVal ) = 0;
      virtual HRESULT __stdcall get_ExposureTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ExposureTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Binning (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Binning (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ImageCorrection (
        /*[out,retval]*/ enum AcqImageCorrection * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageCorrection (
        /*[in]*/ enum AcqImageCorrection pVal ) = 0;
      virtual HRESULT __stdcall get_ExposureMode (
        /*[out,retval]*/ enum AcqExposureMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ExposureMode (
        /*[in]*/ enum AcqExposureMode pVal ) = 0;
      virtual HRESULT __stdcall get_MinPreExposureTime (
        /*[out,retval]*/ double * minVal ) = 0;
      virtual HRESULT __stdcall get_MaxPreExposureTime (
        /*[out,retval]*/ double * maxVal ) = 0;
      virtual HRESULT __stdcall get_PreExposureTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PreExposureTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinPreExposurePauseTime (
        /*[out,retval]*/ double * minVal ) = 0;
      virtual HRESULT __stdcall get_MaxPreExposurePauseTime (
        /*[out,retval]*/ double * maxVal ) = 0;
      virtual HRESULT __stdcall get_PreExposurePauseTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PreExposurePauseTime (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e44e1565-4131-4937-b273-78219e090845"))
CCDCamera : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Info (
        /*[out,retval]*/ struct CCDCameraInfo * * pVal ) = 0;
      virtual HRESULT __stdcall get_AcqParams (
        /*[out,retval]*/ struct CCDAcqParams * * pVal ) = 0;
      virtual HRESULT __stdcall put_AcqParams (
        /*[in]*/ struct CCDAcqParams * pVal ) = 0;
};

struct __declspec(uuid("c851d96c-96b2-4bdf-8df2-c0a01b76e265"))
CCDCameras : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct CCDCamera * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("96de094b-9cdc-4796-8697-e7dd5dc3ec3f"))
STEMDetectorInfo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Binnings (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("d77c0d65-a1dd-4d0a-af25-c280046a5719"))
STEMDetector : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Info (
        /*[out,retval]*/ struct STEMDetectorInfo * * pVal ) = 0;
};

struct __declspec(uuid("ddc14710-6152-4963-aea4-c67ba784c6b4"))
STEMAcqParams : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageSize (
        /*[out,retval]*/ enum AcqImageSize * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageSize (
        /*[in]*/ enum AcqImageSize pVal ) = 0;
      virtual HRESULT __stdcall get_DwellTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DwellTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Binning (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Binning (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("35a2675d-e67b-4834-8940-85e7833c61a6"))
STEMDetectors : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct STEMDetector * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_AcqParams (
        /*[out,retval]*/ struct STEMAcqParams * * pVal ) = 0;
      virtual HRESULT __stdcall put_AcqParams (
        /*[in]*/ struct STEMAcqParams * pVal ) = 0;
};

struct __declspec(uuid("d6bbf89c-22b8-468f-80a1-947ea89269ce"))
Acquisition : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddAcqDevice (
        /*[in]*/ IDispatch * pDevice ) = 0;
      virtual HRESULT __stdcall raw_AddAcqDeviceByName (
        /*[in]*/ BSTR deviceName ) = 0;
      virtual HRESULT __stdcall raw_RemoveAcqDevice (
        /*[in]*/ IDispatch * pDevice ) = 0;
      virtual HRESULT __stdcall raw_RemoveAcqDeviceByName (
        /*[in]*/ BSTR deviceName ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllAcqDevices ( ) = 0;
      virtual HRESULT __stdcall raw_AcquireImages (
        /*[out,retval]*/ struct AcqImages * * ppImageCol ) = 0;
      virtual HRESULT __stdcall get_Cameras (
        /*[out,retval]*/ struct CCDCameras * * pCol ) = 0;
      virtual HRESULT __stdcall get_Detectors (
        /*[out,retval]*/ struct STEMDetectors * * pCol ) = 0;
};

enum ProductFamily
{
    ProductFamily_Tecnai = 0,
    ProductFamily_Titan = 1
};

struct __declspec(uuid("39cacdaf-f47c-4bbf-9ffa-a7a737664ced"))
Configuration : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProductFamily (
        /*[out,retval]*/ enum ProductFamily * pVal ) = 0;
};

struct __declspec(uuid("bc0a2b11-10ff-11d3-ae00-00a024cba50c"))
InstrumentInterface : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NormalizeAll ( ) = 0;
      virtual HRESULT __stdcall get_AutoNormalizeEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pANE ) = 0;
      virtual HRESULT __stdcall put_AutoNormalizeEnabled (
        /*[in]*/ VARIANT_BOOL pANE ) = 0;
      virtual HRESULT __stdcall raw_ReturnError (
        /*[in]*/ enum TEMScriptingError TE ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ IDispatch * * pVector ) = 0;
      virtual HRESULT __stdcall get_StagePosition (
        /*[out,retval]*/ IDispatch * * pStp ) = 0;
      virtual HRESULT __stdcall get_Vacuum (
        /*[out,retval]*/ struct Vacuum * * pVac ) = 0;
      virtual HRESULT __stdcall get_Camera (
        /*[out,retval]*/ struct Camera * * pCamera ) = 0;
      virtual HRESULT __stdcall get_Stage (
        /*[out,retval]*/ struct Stage * * pStage ) = 0;
      virtual HRESULT __stdcall get_Illumination (
        /*[out,retval]*/ struct Illumination * * pI ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct Projection * * pP ) = 0;
      virtual HRESULT __stdcall get_Gun (
        /*[out,retval]*/ struct Gun * * pG ) = 0;
      virtual HRESULT __stdcall get_UserButtons (
        /*[out,retval]*/ struct UserButtons * * pUBS ) = 0;
      virtual HRESULT __stdcall get_AutoLoader (
        /*[out,retval]*/ struct AutoLoader * * pAL ) = 0;
      virtual HRESULT __stdcall get_TemperatureControl (
        /*[out,retval]*/ struct TemperatureControl * * pTC ) = 0;
      virtual HRESULT __stdcall get_BlankerShutter (
        /*[out,retval]*/ struct BlankerShutter * * pBS ) = 0;
      virtual HRESULT __stdcall get_InstrumentModeControl (
        /*[out,retval]*/ struct InstrumentModeControl * * pIMC ) = 0;
      virtual HRESULT __stdcall get_Acquisition (
        /*[out,retval]*/ struct Acquisition * * pIAcq ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ struct Configuration * * pIConfig ) = 0;
};

struct __declspec(uuid("3a4ce1f0-3a05-11d3-ae81-004095005b07"))
UserButton;
    // [ default ] interface IUserButton
    // [ default, source ] dispinterface UserButtonEvent

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_TEMScripting =
    {0xbc0a2b03,0x10ff,0x11d3,{0xae,0x00,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) DIID_UserButtonEvent =
    {0x02cdc9a2,0x1f1d,0x11d3,{0xae,0x11,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) CLSID_Instrument =
    {0x02cdc9a1,0x1f1d,0x11d3,{0xae,0x11,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_Gauge =
    {0x52020820,0x18bf,0x11d3,{0x86,0xe1,0x00,0xc0,0x4f,0xc1,0x26,0xdd}};
extern "C" const GUID __declspec(selectany) IID_Gauges =
    {0x6e6f03b0,0x2ece,0x11d3,{0xae,0x79,0x00,0x40,0x95,0x00,0x5b,0x07}};
extern "C" const GUID __declspec(selectany) IID_Vacuum =
    {0xc7646442,0x1115,0x11d3,{0xae,0x00,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_Camera =
    {0x9851bc41,0x1b8c,0x11d3,{0xae,0x0a,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_StagePosition =
    {0x9851bc4a,0x1b8c,0x11d3,{0xae,0x0a,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_StageAxisData =
    {0x8f1e91c2,0xb97d,0x45b8,{0x87,0xc9,0x42,0x3f,0x5e,0xb1,0x0b,0x8a}};
extern "C" const GUID __declspec(selectany) IID_Stage =
    {0xe7ae1e41,0x1bf8,0x11d3,{0xae,0x0b,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_Vector =
    {0x9851bc47,0x1b8c,0x11d3,{0xae,0x0a,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_Illumination =
    {0xef960690,0x1c38,0x11d3,{0xae,0x0b,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_Projection =
    {0xb39c3ae1,0x1e41,0x11d3,{0xae,0x0e,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) IID_Gun =
    {0xe6f00870,0x3164,0x11d3,{0xb4,0xc8,0x00,0xa0,0x24,0xcb,0x92,0x21}};
extern "C" const GUID __declspec(selectany) IID_IUserButton =
    {0xe6f00871,0x3164,0x11d3,{0xb4,0xc8,0x00,0xa0,0x24,0xcb,0x92,0x21}};
extern "C" const GUID __declspec(selectany) IID_UserButtons =
    {0x50c21d10,0x317f,0x11d3,{0xb4,0xc8,0x00,0xa0,0x24,0xcb,0x92,0x21}};
extern "C" const GUID __declspec(selectany) IID_AutoLoader =
    {0x28df27ea,0x2058,0x41d0,{0xab,0xbd,0x16,0x7f,0xb3,0xbf,0xcd,0x8f}};
extern "C" const GUID __declspec(selectany) IID_TemperatureControl =
    {0x71b6e709,0xb21f,0x435f,{0x95,0x29,0x1a,0xee,0x55,0xcf,0xa0,0x29}};
extern "C" const GUID __declspec(selectany) IID_BlankerShutter =
    {0xf1f59bb0,0xf8a0,0x439d,{0xa3,0xbf,0x87,0xf5,0x27,0xb6,0x00,0xc4}};
extern "C" const GUID __declspec(selectany) IID_InstrumentModeControl =
    {0x8dc0fc71,0xff15,0x40d8,{0x81,0x74,0x09,0x22,0x18,0xd8,0xb7,0x6b}};
extern "C" const GUID __declspec(selectany) IID_AcqImage =
    {0xe15f4810,0x43c6,0x489a,{0x9e,0x8a,0x58,0x8b,0x09,0x49,0xe1,0x53}};
extern "C" const GUID __declspec(selectany) IID_AcqImages =
    {0x86365241,0x4d38,0x4642,{0xb0,0x24,0xcf,0x45,0x0c,0xeb,0x25,0x0b}};
extern "C" const GUID __declspec(selectany) IID_CCDCameraInfo =
    {0x024ded60,0xb124,0x4514,{0xbf,0xe2,0x02,0xc0,0xf5,0xc5,0x1d,0xb9}};
extern "C" const GUID __declspec(selectany) IID_CCDAcqParams =
    {0xc03db779,0x1345,0x42ab,{0x93,0x04,0x95,0xb8,0x57,0x89,0x16,0x3d}};
extern "C" const GUID __declspec(selectany) IID_CCDCamera =
    {0xe44e1565,0x4131,0x4937,{0xb2,0x73,0x78,0x21,0x9e,0x09,0x08,0x45}};
extern "C" const GUID __declspec(selectany) IID_CCDCameras =
    {0xc851d96c,0x96b2,0x4bdf,{0x8d,0xf2,0xc0,0xa0,0x1b,0x76,0xe2,0x65}};
extern "C" const GUID __declspec(selectany) IID_STEMDetectorInfo =
    {0x96de094b,0x9cdc,0x4796,{0x86,0x97,0xe7,0xdd,0x5d,0xc3,0xec,0x3f}};
extern "C" const GUID __declspec(selectany) IID_STEMDetector =
    {0xd77c0d65,0xa1dd,0x4d0a,{0xaf,0x25,0xc2,0x80,0x04,0x6a,0x57,0x19}};
extern "C" const GUID __declspec(selectany) IID_STEMAcqParams =
    {0xddc14710,0x6152,0x4963,{0xae,0xa4,0xc6,0x7b,0xa7,0x84,0xc6,0xb4}};
extern "C" const GUID __declspec(selectany) IID_STEMDetectors =
    {0x35a2675d,0xe67b,0x4834,{0x89,0x40,0x85,0xe7,0x83,0x3c,0x61,0xa6}};
extern "C" const GUID __declspec(selectany) IID_Acquisition =
    {0xd6bbf89c,0x22b8,0x468f,{0x80,0xa1,0x94,0x7e,0xa8,0x92,0x69,0xce}};
extern "C" const GUID __declspec(selectany) IID_Configuration =
    {0x39cacdaf,0xf47c,0x4bbf,{0x9f,0xfa,0xa7,0xa7,0x37,0x66,0x4c,0xed}};
extern "C" const GUID __declspec(selectany) IID_InstrumentInterface =
    {0xbc0a2b11,0x10ff,0x11d3,{0xae,0x00,0x00,0xa0,0x24,0xcb,0xa5,0x0c}};
extern "C" const GUID __declspec(selectany) CLSID_UserButton =
    {0x3a4ce1f0,0x3a05,0x11d3,{0xae,0x81,0x00,0x40,0x95,0x00,0x5b,0x07}};

} // namespace TEMScripting

#pragma pack(pop)
